{"version":3,"sources":["api/getData.ts","api/getTodos.ts","utils/constants.js","api/getUsers.ts","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","response","json","data","getTodos","getUsers","TodoItem","todo","id","title","completed","user","name","TodoList","todos","filter","onClick","map","key","App","useState","saveTodos","visibleTodos","saveVisibleTodos","isLoading","setLoading","isLoaded","setLoaded","filterUsed","setFilterUsed","loadTodos","Promise","all","finally","loadedTodos","loadedUsers","preparedTodos","find","person","userId","className","option","sort","b","localeCompare","reverse","type","disabled","ReactDOM","render","document","getElementById"],"mappings":"6PAAaA,G,MAAO,uCAAG,WAAUC,GAAV,iBAAAC,EAAA,sEACEC,MAAMF,GADR,cACfG,EADe,gBAEFA,EAASC,OAFP,cAEfC,EAFe,yBAIdA,GAJc,2CAAH,uDCKPC,EAAQ,uCAAG,sBAAAL,EAAA,+EACfF,ECNe,+CDKA,2CAAH,qDEDRQ,EAAQ,uCAAG,sBAAAN,EAAA,+EACfF,EDJe,+CCGA,2CAAH,qDCGRS,EAAsB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAElCC,EAIED,EAJFC,GACAC,EAGEF,EAHFE,MACAC,EAEEH,EAFFG,UACAC,EACEJ,EADFI,KAGF,OACE,4BACE,4BAAKH,GACL,4BAAKG,EAAOA,EAAKC,KAAO,IACxB,4BAAKH,GACL,4BAAKC,EAAY,MAAQ,QCVlBG,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAV,OACjC,+BACE,+BACE,4BACE,wBAAIC,QAAS,kBAAMD,EAAO,QAA1B,MAGA,wBAAIC,QAAS,kBAAMD,EAAO,cAA1B,QAGA,wBAAIC,QAAS,kBAAMD,EAAO,WAA1B,SAGA,wBAAIC,QAAS,kBAAMD,EAAO,eAA1B,YAKJ,+BACGD,EAAMG,KAAI,SAAAV,GAAI,OAAI,kBAAC,EAAD,CAAUW,IAAKX,EAAKC,GAAID,KAAMA,UCqDxCY,EAzEK,WAAO,IAAD,EACGC,mBAAyB,IAD5B,mBACjBN,EADiB,KACVO,EADU,OAEiBD,mBAAQ,YAAqBN,IAF9C,mBAEjBQ,EAFiB,KAEHC,EAFG,OAGQH,oBAAS,GAHjB,mBAGjBI,EAHiB,KAGNC,EAHM,OAIML,oBAAS,GAJf,mBAIjBM,EAJiB,KAIPC,EAJO,OAKYP,oBAAS,GALrB,mBAKjBQ,EALiB,KAKLC,EALK,KAOlBC,EAAS,uCAAG,oCAAA/B,EAAA,6DAChB0B,GAAW,GADK,SAGyBM,QAAQC,IAC/C,CAAC5B,IAAYC,MAEZ4B,SAAQ,kBAAMN,GAAU,MANX,mCAGTO,EAHS,KAGIC,EAHJ,KAQVC,EAAgB,YAAIF,GACvBjB,KAAI,SAACV,GACJ,IAAMI,EAAOwB,EAAYE,MAAK,SAAAC,GAAM,OAAIA,EAAO9B,KAAOD,EAAKgC,UAE3D,OAAO,eACFhC,EADL,CAEEI,YAINU,EAAUe,GACVb,EAAiBa,GACjBX,GAAW,GApBK,4CAAH,qDA8Cf,OACE,yBAAKe,UAAU,OACXd,EAYE,kBAAC,EAAD,CAAUZ,MAAOQ,EAAcP,OArCpB,SAAC0B,GAClB,GAAIb,EAAY,CACd,OAAQa,GACN,IAAK,KAAMlB,EAAiB,YAAIT,GAC7B4B,MAAK,SAAC3C,EAAG4C,GAAJ,OAAUA,EAAEnC,GAAKT,EAAES,OACzB,MACF,IAAK,YAAae,EAAiB,YAAIT,GACpC4B,MAAK,SAAA3C,GAAC,OAAKA,EAAEW,WAAa,EAAI,MAC/B,MACF,IAAK,WAAYa,EAAiB,YAAIT,GACnC4B,MAAK,SAAC3C,EAAG4C,GAAJ,OAAY5C,EAAEY,MAAQgC,EAAEhC,KAAQgC,EAAEhC,KAAKC,KAAKgC,cAAc7C,EAAEY,KAAKC,MAAQ,MAC/E,MACF,QAASW,EAAiB,YAAIT,GAC3B4B,MAAK,SAAC3C,EAAG4C,GAAJ,OAAUA,EAAElC,MAAMmC,cAAc7C,EAAEU,WAG5CoB,GAAc,QAEdN,EAAiBD,EAAauB,WAC9BhB,GAAc,MAQV,4BACEiB,KAAK,SACLN,UAAU,SACVO,SAAUvB,EACVR,QAASc,GAERN,EAAa,kDAAoB,qDCpE9CwB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.59025eb6.chunk.js","sourcesContent":["export const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data;\n};\n","import { todosURL } from '../utils/constants';\nimport { TodoType } from '../utils/interfaces';\nimport { getData } from './getData';\n\n\nexport const getTodos = async (): Promise<TodoType[]> => {\n  return getData<TodoType[]>(todosURL);\n};\n","export const todosURL = 'https://jsonplaceholder.typicode.com/todos';\nexport const usersURL = 'https://jsonplaceholder.typicode.com/users';\n","import { usersURL } from '../utils/constants';\nimport { UserType } from '../utils/interfaces';\nimport { getData } from './getData';\n\nexport const getUsers = async (): Promise<UserType[]> => {\n  return getData<UserType[]>(usersURL);\n};\n","import React, { FC } from 'react';\nimport { PreparedTodo } from '../utils/interfaces';\n\ninterface Props {\n  todo: PreparedTodo;\n}\n\nexport const TodoItem: FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <tr>\n      <td>{id}</td>\n      <td>{user ? user.name : ''}</td>\n      <td>{title}</td>\n      <td>{completed ? 'Yes' : 'No'}</td>\n    </tr>\n  );\n};\n","import React, { FC } from 'react';\nimport { TodoItem } from './TodoItem';\nimport { PreparedTodo } from '../utils/interfaces';\n\n\ninterface Props {\n  todos: PreparedTodo[];\n  filter: (option: string) => void;\n}\n\nexport const TodoList: FC<Props> = ({ todos, filter }) => (\n  <table>\n    <thead>\n      <tr>\n        <th onClick={() => filter('id')}>\n          No\n        </th>\n        <th onClick={() => filter('username')}>\n          Name\n        </th>\n        <th onClick={() => filter('title')}>\n          Title\n        </th>\n        <th onClick={() => filter('completed')}>\n          Status\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => <TodoItem key={todo.id} todo={todo} />)}\n    </tbody>\n  </table>\n);\n","import React, { FC, useState } from 'react';\nimport './App.css';\n\nimport { getTodos } from './api/getTodos';\nimport { getUsers } from './api/getUsers';\n\nimport { TodoList } from './components/TodoList';\nimport { PreparedTodo } from './utils/interfaces';\n\nconst App: FC<{}> = () => {\n  const [todos, saveTodos] = useState<PreparedTodo[]>([]);\n  const [visibleTodos, saveVisibleTodos] = useState<PreparedTodo[]>([...todos]);\n  const [isLoading, setLoading] = useState(false);\n  const [isLoaded, setLoaded] = useState(false);\n  const [filterUsed, setFilterUsed] = useState(true);\n\n  const loadTodos = async () => {\n    setLoading(true);\n\n    const [loadedTodos, loadedUsers] = await Promise.all(\n      [getTodos(), getUsers()],\n    )\n      .finally(() => setLoaded(true));\n\n    const preparedTodos = [...loadedTodos]\n      .map((todo) => {\n        const user = loadedUsers.find(person => person.id === todo.userId);\n\n        return {\n          ...todo,\n          user,\n        };\n      });\n\n    saveTodos(preparedTodos);\n    saveVisibleTodos(preparedTodos);\n    setLoading(false);\n  };\n\n  const sortFilter = (option: string) => {\n    if (filterUsed) {\n      switch (option) {\n        case 'id': saveVisibleTodos([...todos]\n          .sort((a, b) => b.id - a.id));\n          break;\n        case 'completed': saveVisibleTodos([...todos]\n          .sort(a => (a.completed ? -1 : 1)));\n          break;\n        case 'username': saveVisibleTodos([...todos]\n          .sort((a, b) => ((a.user && b.user) ? b.user.name.localeCompare(a.user.name) : 0)));\n          break;\n        default: saveVisibleTodos([...todos]\n          .sort((a, b) => b.title.localeCompare(a.title)));\n      }\n\n      setFilterUsed(false);\n    } else {\n      saveVisibleTodos(visibleTodos.reverse());\n      setFilterUsed(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {!isLoaded\n        ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            disabled={isLoading}\n            onClick={loadTodos}\n          >\n            {isLoading ? (<>Loading...</>) : (<>Load Todos</>)}\n          </button>\n        )\n        : (\n          <TodoList todos={visibleTodos} filter={sortFilter} />\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}